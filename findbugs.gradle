apply plugin: 'findbugs'

// Settings
ext {
  advisorFindbugsRules  = "${project.rootDir}/advisor-findbugs-rules.xml"
  advisorFindbugsOutput = "${project.rootDir}/build/reports/findbugs/findbugs-report.html"
}

// Task
afterEvaluate { project ->
    task('findBugs', type: FindBugs) {
        // Description
        description = 'Run FindBugs'
        group       = 'verification'

        // Aborting
        ignoreFailures = false
        effort         = 'max'

        // Config pathes
        classpath = files(project.configurations.compile.asPath)
        classes   = fileTree('build/intermediates/classes/').exclude('**/*R$*.class') as FileCollection
        source    = fileTree('src/main/java/').include('**/*.java') as FileCollection

        // Optional exclude filter
        def optionalFilter = new File(advisorFindbugsRules)
        if (optionalFilter.exists()) {
            excludeFilter = optionalFilter
        }

        // Report
        reports {
            xml{
                enabled = false
            }

            html {
                enabled     = true
                destination = advisorFindbugsOutput
            }
        }
    }
}
